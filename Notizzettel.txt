=============================================

Seminar Modern C++

Guten Morgen

Peter Loos

peter.loos@gmx.de
-----------------

https://github.com/pelocpp

https://github.com/pelocpp/cpp_modern

https://github.com/pelocpp/cpp_concurrency

C/C++  Java C#  JavaSript Mobile Programming 

Back-to-the-Roots: C++

(( C++:  schwierige Sprache ))

=============================================

ToDo-Liste:

Donnerstag:

== Variadic Templates ohne 'template'  // check

== Folding : C++ 17:  Folding expression // check

== RAII // Stack Unwinding  // check

== Smart Pointer :  std::unique_ptr //   (( std::weak_ptr )) // check

== Deleter // check

== (( IOStreams // WChar ))  std::shared_buffer

== Future, Promise, std::async ..., Mutex // check

   Shared Future ... // check

== Konzepte (concept, requires)

== Interfaces a la concept // SFINAE

== Type_Traits // std::variant // check

   Frage: Kann man bzgl. eines bestimmten Datentyps etwas 
   spezifisches machen ??


== Utility Klassen (C++ 17): std::optional, std::any, 

== std::span // std::string_view

== constexpr

== std::initializer_list    // check

== Zeichenketten


=============================================

ToDo-Liste:

Type-Traits // Metaprogramming.

Frage: Kann man bzgl. eines bestimmten Datentyps etwas 
spezifisches machen ??

=============================================


Github

https://github.com/pelocpp

https://github.com/pelocpp/cpp_modern

=============================================

auto:

A) Definition einer Variablen

B) Rückgabetyp einer Funktion

C) Definition eines Parameters

i)

    static auto sum2(short f1, short f2)
    {
        return f1 + f2;
00007FF7EDE919A5  movsx       eax,word ptr [f1]  
00007FF7EDE919AC  movsx       ecx,word ptr [f2]  
00007FF7EDE919B3  add         eax,ecx  
    }

        static auto sum3(int f1, int f2)
    {
        return f1 + f2;
00007FF7EDE919F3  mov         eax,dword ptr [f2]  
00007FF7EDE919F9  mov         ecx,dword ptr [f1]  
00007FF7EDE919FF  add         ecx,eax  
00007FF7EDE91A01  mov         eax,ecx  
    }

Wann ist short relevant:

Habe viele Werte // Array // Vector: Speicher

==========================================

auto:
-----

https://github.com/pelocpp/cpp_modern/blob/master/GeneralSnippets/Auto/Auto.md

==========================================

Generische Funktionen:
---------------------

auto als Parameter

https://github.com/pelocpp/cpp_modern/blob/master/GeneralSnippets/GenericFunctions/GenericFunctions.md

============================================

Lambda:

Wie sieht der Compiler (intern) ein Lambda ???

Eine struct / class, die den operator() hat.

Tool:  Cpp Insights

https://cppinsights.io/

Converter:

Modern ++ nach Classic C++:

// ======================================================

Variadic Templates:

a) How ????

b) Why ????  std::make_unique

i)  Verständnis

ii) Anwenden / umsetzen


Transport von Daten von A nach B:
--------------------------------

std::make_unique
std::make_shared
std::make_tuple

std::thread
std::jthread

Methode emplace_back ...

Hmmm, Modern C++:

KRITIK:  Da wird zu viel KOPIERT.

Vermeiden: Am Stack: Referenz

C++ 11:  Man kann jetzt statt kopieren auch verschieben.

Transport von Daten von A nach B:

Hier sollte man beim Transport auch verschieben können:

Perfekten Transport // Perfekte Forwarding


// ======================================================

Was ist der Kern von C++:

C++ ohne Templates

==> C++:  Bjarne Stroustrup

==>  C++:   C with Classes

==> Alexander Alexandrowitsch Stepanow:  Generischen Programmierung

Stepanow + Stroustrup:   C++:   Bibliothek  // STL

    Standard TEMPLATE Library

=====================================================

C:

printf:

... Ellipsis

Very Hacky:  varg, vstart, ...

Why: ... in C:

Problem:  man wollte printf:

printf ("%d und %f", 1, 2.5);

printf (char* format, ...);

printf (char* format, ...);  varg, vstart

my_func (int, ...)


Realisierung von printf: 

Die Adresse der ersten Parameters war der "Stack Öffner"

Dennis Ritchie:

"A Programmer knows what he does"


================================================

Parameter Pack

Exakt: Eine komma-getrennte Liste von Werten / Datentypen

=========================================================

Frage: Kann man bzgl. eines bestimmten Datentyps etwas 
spezifisches machen ??

Yes ==> 

=========================================================

C++:

Was ist eine Referenz:

Ein Alias für ein vorhandenes Objekt (Variable).

Ab C++ 11:

Es gibt eine zweite Art von Referenz: int&& vs int&

C: Wertzuweisung:

a = b + 5;

Links: Adresse   // LValue

Rechts: Wert     // RValue

int&:   LValue - Referenz // benannte Referenz

int&&:  RValue - Referenz // Objekt OHNE Name (tmp. Objekt)

=======================================================

Verschiebesemantik
====================

... 10A   // am Stack   , wird freigegeben
... 6E0   // im Vektor





CC: Stack  - nicht vorbelegt.

CD: Heap  - nicht vorbelegt.

DD: Heap  - bereits wieder freigegeben.

===============================

... 3D0  // 000000
... 3D0

===============================

noexcept:

Neue Philosophie in C++

Exception Safety // Guarantee


===============================

auto n;

===============================

Perfect Forwarding:

https://github.com/pelocpp/cpp_modern/blob/master/GeneralSnippets/PerfectForwarding/PerfectForwarding.md

    

=====================================================

Folding:    Abrollen

Arithm. Ausdrücke mit EINEM Operator:

int n = 1 + 2 + 3 + 4 + 5 + 6;

// viele Variablen: for ....

int mn = m1 + m2 + m3 + m4 + m5 + m6;

Trick in der Art und Weise der Code Generierung.

i) Vielen Werte:   Pack

ii) Syntax eines Folding Ausdrucks.

==========================================

std::vector:              HEAP
std::initializer_list:    STACK

std::string:              HEAP
std::string_view:         "ABCDE" / Nicht am Heap / 

std::vector
std::array
C-Style Array
std::span

==========================================

SSO: Small String Optimization: 

Kleine Zeichenketten DIREKT in das std::string Objekt mit reinpackt.

Länge:        15.  
std::string:  40 Bytes

std::string

size
capacity
Ptr => Heap
char buffer[15];  // leer // gefüllt (<= 15)

==========================================

RAII

Idiom:

Worum gehts ???

Resources:    ==> Tabellen im unterlagerten OS

open // close   FILE

attach / detach   Socket

lock // unlock   Mutex  // fatal

new  // delete


Frage: Hmmm, habe den 2. Aufruf vergessen // (break)

Idee:

OO // Konstruktoren // Destruktoren

Destruktoren: Wann wird der aufgerufen: 

    Am Ende des Scopes // Deterministisch

Resource:  Wrapper // Hüllenobjekt
== Konstruktor:  open
== Destruktoren: close

Beispiel:

https://github.com/pelocpp/cpp_design_patterns/blob/master/Patterns/RAII_Idiom/Resources/Readme.md


==============================================================

Copy / Move Elision: Auslassen einer dieser beiden Operationen

RVO:  Return Value Optimization

NRVO:  Named Return Value Optimization

=======================================================

std::unique_ptr
---------------

Ursprünglich:

a) Kapselt einen Zeiger (new)

b) HAT EINEN Besitzer  // Ein std::unique_ptr-Objekt ist NICHT kopierbar.

c) Aber er ist verschiebbar  //  std::move 

d) Hat einen Destruktor: delete

Idee: ==> RAII ===> Frage / Beobachtung: open / close

Frage zu Alignment:

https://github.com/pelocpp/cpp_clean_performant_secure/blob/master/Clean_Performant_Code/Memory_Management/Readme_MemoryManagement_Alignment_Padding.md

// ============================================================

std::thread

==> join // detach

// ============================================================

Win32:

std::thread ==> CreateThread abgebildet.


=====================================================

C++ API:  Zweite Option, einen Thread zu erzeugen.

std::future:   Ist ein Datenkanal : geschrieben und gelesen werden kann.

Schreiben: via return
Lesen:        via get

Hmmm, arbeitet std::async ebenfalls mit  CreateThread ???

Allgemein:

a) CreateThread 

b) Thread Pool

=====================================================

std::thread  

Frage:  Hmm, kann ich auch mit diesem einen Datenkanal einrichten ???

Prinzipiell: Thread-Prozedur: void

=====================================================


std::unique_ptr       move-only 
std::shared_ptr       copy-able


std::future                       move-only  //Why: Um einen vorzeitigen D'tor call zu vermeiden
std::shared_future         copy-able

=====================================================

Multi-Threading:  

Problem: Zugriff auf gemeinsame Daten.  // Konkurrent

Feature:                                                       // Kooperation 

std::condition_variable:   

Wann wird der Lambda gerufen?

a) Unmittelbar nach dem Aufruf von wait

b) notifiy

c) Spurios Wakeup: 

   == C++ muss sein Concurrency-API auf alle möglichen Plattformen abbilden.
  


==================================================================

std::variant:

Hmmmmmmmmmmmm, ähnlich mit Union :)

Ein Datentyp, dessen Variablen Werte unterschiedlichen Typs
aufnehmen könnnen, zu EINEM Zeitpunkt aber nur EINEN Wert.

Excel: Zelle // Cell

Datum, Zahl, Zeichenkette, num. Wert, ....

=============================================

Exceptions // Return Code:

Exceptions: Gravierendes :)

a) Exceptions

b) Return Code

=====================================

Return Code:
-----------

Pro:
===
Simpel,
schnell

Contra:
=======
Kann man ignorieren.


Return Code:
-----------

Pro:
====
Simpel,
schnell

Contra:
=======
Kann man ignorieren.

Exceptions:
-----------

Pro:
===
Kann nicht ignoriert werden
Hat eine Beschreibung drinne
Man kann nach dem Typ filtern


Contra:
=======
Langsamer
Code mit Exception Handling ist vergleichweise länglich.
( catch .... Kaskade )


Freigabe von Resources: RAII
Block

========================================

Nur eine return-Anweisung:

   Ist das altmodisch oder auch noch modern ?????

   Depends ...

========================================

Performanz: ==> Nicht wirklich gegeben.

========================================

Um welche Art von Fehlern geht es eigentlich genau ???

Warning: im ini File hat ein Wert gefehlt, default Wert.

Fatal:  ser-Device not found: ...

========================================

Logging unterfüttert ???

Wie man es macht, macht man es falsch ...

Über den Lauf der Jahre:

Jung: ===> Streng zu programmieren.

Alt:  ===> Go with the flow:

      ABER: Silent Error Revovery: Logging.

=========================================

A) Exception oder Ret Code.

B) Wie sieht es das Team:    A & B.

============

SW Architekt : Noooooooooo

============

Anforderungen ändern sich über die Zeit:


================================================

goto vs. try / catch

Wieviel Funktionen:

Library ???

================================================

goto:

jmp ==> goto

Bad Code:

C ===> Kontrollstrukturen : if, while, for   

Unkontrolliertes goto // Zwischen Scopes.

Sicheren Einsatz: No goto.

2 geschachtelte for-Schleifen:  label-break;

==> goto.

==============================================

Einheitlichkeit:  Library

Sinnvolle Teile ausmachen:

Paketierung:

std::expected

==============================================
 
constexpr:

===> C
===> Teile der STL


new und delete ??? constexpr ????

==============================================

concepts:

Für wen ????

a) STL neu überarbeitet.

   Proaktive Fehlermeldungen // Reagierende Fehlermeldungen.

b) Für uns.


==============================================

